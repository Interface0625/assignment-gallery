{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["titlefont","color","headerStyle","background","textAlign","padding","linkStyle","textDecoration","margin","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","aboutStyle","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e10ece73.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1 style= {titlefont}>React TodoList!</h1>\n            <Link style={linkStyle} to=\"/\">Homepage</Link> | <Link \n            style={linkStyle}\n            to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst titlefont = {\n    color: '#080201'\n}\n\nconst headerStyle = {\n    background: '#ae1b09',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#000000',\n    textDecoration: 'none',\n    margin: '10px'\n}\nexport default Header;","import React, { Component } from 'react'\nimport Proptypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n    \n    render() {\n        const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind\n                    (this, id)}\n                    /> {''}\n                    { title } \n                    <button onClick={this.props.delTodo.bind(this, id)} \n                     style= {btnStyle}>x</button>\n                </p>\n            </div>\n        )\n    }\n}\n\nTodoItem.propTypes = {\n    todo: Proptypes.object.isRequired,\n    markComplete: Proptypes.func.isRequired,\n    delTodo: Proptypes.func.isRequired\n}\n\n\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport Proptypes from 'prop-types';\n\nclass Todos extends Component {\n    render(){\n        return this.props.todos.map((todo) => (\n        <TodoItem key= {todo.id}todo={todo} markComplete=\n        {this.props.markComplete} delTodo={this.props.delTodo}/>\n        ));\n    }\n}\n\n//Proptypes\nTodos.propTypes = {\n    todos: Proptypes.array.isRequired,\n    markComplete: Proptypes.func.isRequired,\n    delTodo: Proptypes.func.isRequired\n}\nexport default Todos;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class AddTodo extends Component {\nstate = {\n    title: ''\n}\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''})\n    }\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}style={{ display: 'flex' }}>\n                <input \n                    type=\"text\" \n                    name=\"title\" \n                    style={{ flex: '10', padding: '5px'}}\n                    placeholder=\"What do you want to add?\" \n                    value={this.state.title}\n                    onChange={this.onChange}\n                    />\n                <input \n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn\"\n                    style={{flex: '1'}}\n                />\n            </form>\n        )\n    }\n}\n\nAddTodo.propTypes = {\n    addTodo: PropTypes.func.isRequired\n}\n\nexport default AddTodo","import React from 'react'\n\nexport default function About() {\n    return (\n        <div style={aboutStyle}>\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is a simple test page from the React Project\n            </p>\n        </React.Fragment>\n        </div>\n    )\n}\n\nconst aboutStyle = {\n    background: '#E83A0C',\n    color: '#000000',\n    textAlign: 'center',\n    padding: '10px'\n}\n\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo'\nimport About from './components/pages/About'\nimport axios from 'axios';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5')\n    .then(res => this.setState({ todos: res.data })) \n  }\n\n  // Toggles line if completed\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })});\n  }\n\n  // Delete todo\n  delTodo = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id} `)\n      .then(res =>  this.setState({ todos: [...this.state.todos.filter(todo => todo.id\n        !== id)] }));\n  }\n\n  //Add Todo\n  addTodo = (title) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos',{\n    title,\n    completed: false\n  })\n   .then(res => this.setState({ todos: \n    [...this.state.todos, res.data]}));\n  }\n\n  render() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <Route exact path=\"/\" render={props => ( \n            <React.Fragment>\n              <AddTodo addTodo={this.addTodo}/>\n              <Todos todos={this.state.todos} markComplete={this.markComplete}\n              delTodo={this.delTodo} />\n            </React.Fragment>\n          )} />\n          <Route path=\"/about\" component={About} />          \n        </div> \n      </div>\n    </Router>\n  );\n}\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}