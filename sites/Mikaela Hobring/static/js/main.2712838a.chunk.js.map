{"version":3,"sources":["Task/Task.jsx","TaskForm/TaskForm.jsx","Config/config.js","App.js","index.js"],"names":["Task","props","taskContent","taskId","handleRemoveTask","bind","id","this","removeTask","className","onClick","Component","TaskForm","state","newTaskContent","handleUserInput","writeTask","e","setState","target","value","addTask","placeholder","onChange","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","app","firebase","initializeApp","database","ref","child","tasks","prevTask","on","snap","push","key","val","i","length","splice","task","set","remove","map","ReactDOM","render","document","getElementById"],"mappings":"uSAqCeA,G,wDA9BV,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,YAAcD,EAAMC,YACzB,EAAKC,OAASF,EAAME,OACpB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAJV,E,6DAODC,GACbC,KAAKN,MAAMO,WAAWF,K,6BAGnBL,GAAO,IAAD,OACT,OACI,yBAAKQ,UAAW,gBACX,0BAAMA,UAAU,WACZC,QAAS,kBAAM,EAAKN,iBAAiB,EAAKD,UAD9C,MAGD,uBAAGM,UAAW,eAAeF,KAAKL,kB,GAnBhCS,cCkDJC,G,wDA/CX,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACTC,eAAgB,IAGpB,EAAKC,gBAAkB,EAAKA,gBAAgBV,KAArB,gBACvB,EAAKW,UAAY,EAAKA,UAAUX,KAAf,gBAPH,E,4DAYEY,GACZV,KAAKW,SAAS,CACVJ,eAAgBG,EAAEE,OAAOC,U,kCAQjCb,KAAKN,MAAMoB,QAAQd,KAAKM,MAAMC,gBAG9BP,KAAKW,SAAS,CACVJ,eAAgB,O,+BAMpB,OACI,yBAAKL,UAAU,eACX,8BACA,2BAAOA,UAAW,YAClBa,YAAY,qBACZF,MAAOb,KAAKM,MAAMC,eAClBS,SAAUhB,KAAKQ,kBACf,4BAAQN,UAAW,aACnBC,QAASH,KAAKS,WADd,kB,GAxCOL,cCPVa,EAAY,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,6C,iBC2FIC,G,8DAvFX,WAAY/B,GAAO,IAAD,8BAChB,cAAMA,IACDoB,QAAU,EAAKA,QAAQhB,KAAb,gBACf,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAMlB,EAAK4B,IAAMC,IAASC,cAAcX,GAClC,EAAKY,SAAW,EAAKH,IAAIG,WAAWC,MAAMC,MAAM,SAG9C,EAAKzB,MAAO,CACV0B,MAAO,IAdK,E,iEAmBG,IAAD,OACZC,EAAWjC,KAAKM,MAAM0B,MAK5BhC,KAAK6B,SAASK,GAAG,eAAe,SAAAC,GAC9BF,EAASG,KAAK,CACdrC,GAAIoC,EAAKE,IACT1C,YAAawC,EAAKG,MAAM3C,cAGtB,EAAKgB,SAAS,CACZqB,MAAOC,OAMbjC,KAAK6B,SAASK,GAAG,iBAAiB,SAAAC,GAChC,IAAI,IAAII,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IAC/BN,EAASM,GAAGxC,KAAOoC,EAAKE,KACzBJ,EAASQ,OAAOF,EAAE,GAGlB,EAAK5B,SAAS,CACZqB,MAAOC,S,8BAKTS,GACN1C,KAAK6B,SAASO,OAAOO,IAAI,CAAChD,YAAa+C,M,iCAG9B9C,GACTI,KAAK6B,SAASE,MAAMnC,GAAQgD,W,+BAMpB,IAAD,OACP,OACE,yBAAK1C,UAAU,eACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,WAAf,+CAEA,yBAAKA,UAAU,YAEbF,KAAKM,MAAM0B,MAAMa,KAAI,SAACH,GACpB,OACA,kBAAC,EAAD,CAAM/C,YAAe+C,EAAK/C,YAC1BC,OAAU8C,EAAK3C,GACfsC,IAAOK,EAAK3C,GACZE,WAAc,EAAKA,iBAKrB,0BAAMC,UAAU,UAChB,kBAAC,EAAD,CAAUY,QAAWd,KAAKc,gB,GAlFhBV,cCLpB0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAElCxB,c","file":"static/js/main.2712838a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport'./Task.css';\n//Proptypes allows me to typecheck on the props that i pass in my components.\nimport PropTypes from 'prop-types';\n\nclass Task extends Component {\n\n     constructor(props){\n         super(props);\n         this.taskContent = props.taskContent;\n         this.taskId = props.taskId;\n         this.handleRemoveTask = this.handleRemoveTask.bind(this);\n     }\n\n     handleRemoveTask(id){\n         this.props.removeTask(id);\n     }\n//In render i pass props(properthys) which will represent what will show up in the DOM.\n     render(props){\n         return(\n             <div className =\"task fade-in\">\n                  <span className=\"closebtn\" \n                      onClick={() => this.handleRemoveTask(this.taskId)}>\n                      X </span>\n                 <p className =\"taskContent\">{this.taskContent}</p>\n                 \n             </div>\n         )\n     }\n}\n\nTask.propTypes = {\n    taskContent: PropTypes.string\n\n}\n//When exporting Task will allow me to import it in another file\n//without {}\nexport default Task;","import React, { Component } from 'react';\nimport './TaskForm.css';\n\n\n//When a new form gets created, newTaskContent will be empty.\n//I need to bind handleUserInput to this component because\n//it has to refer to the component.\nclass TaskForm extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            newTaskContent: '',\n        };\n        \n        this.handleUserInput = this.handleUserInput.bind(this);\n        this.writeTask = this.writeTask.bind(this);\n    }\n\n    //When user input changes, it will set the newTaskContent to\n    //the value of the input box. \n        handleUserInput(e){\n            this.setState({\n                newTaskContent: e.target.value, //the value of the user input (string).\n            })\n        \n    }\n\n    // Call a method that sets the taskContent for a task\n    // to the value of the user input.\n    writeTask(){\n        this.props.addTask(this.state.newTaskContent);\n\n        //Set newTaskContent back to an empty string.\n        this.setState({\n            newTaskContent: ''\n        })\n    }\n//In placeholder i need something to hold the Value in this form.\n//I want the state of this form to be related to the Taskform Component.  \n    render(){\n        return(\n            <div className=\"taskWrapper\">\n                <span>\n                <input className =\"taskInput\"\n                placeholder=\"Type Your New Task\" \n                value={this.state.newTaskContent}\n                onChange={this.handleUserInput}/>\n                <button className =\"taskButton\"\n                onClick={this.writeTask}>Add Task</button>\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default TaskForm;","export const DB_CONFIG = {\n    apiKey: \"AIzaSyBvRBxd2VMiNL9UFVu6VO0ZwSziOqlF4Cs\",\n    authDomain: \"mikaelastodolist.firebaseapp.com\",\n    databaseURL: \"https://mikaelastodolist.firebaseio.com\",\n    projectId: \"mikaelastodolist\",\n    storageBucket: \"mikaelastodolist.appspot.com\",\n    messagingSenderId: \"331688274730\",\n    appId: \"1:331688274730:web:9c021c9747ca1dea020c53\"\n  };\n\n","import React, { Component } from 'react';\nimport Task from './Task/Task';\nimport TaskForm from './TaskForm/TaskForm';\nimport { DB_CONFIG } from'./Config/config';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport './App.css';\n\n\n  class App extends Component {\n\n    constructor(props){\n      super(props);\n      this.addTask = this.addTask.bind(this);\n      this.removeTask = this.removeTask.bind(this);\n\n      //App references this app.\n      //Ref references the location towards the database which\n      //the user will be writing querys.\n      //the child(task) is instances which will store our tasks objects.\n      this.app = firebase.initializeApp(DB_CONFIG);\n      this.database = this.app.database().ref().child('tasks');\n\n      //Here we are going to setup a React state of our component.\n        this.state ={\n          tasks: [],\n      }\n    }\n\n    //Calling a lifecycle method\n    componentWillMount(){\n      const prevTask = this.state.tasks;\n\n      //Snap represent snapshot of the DB.\n      //In Firebase, everytime i redata the db, i recieve the data in a form\n      //of a snapshot object, which is passed to the callback. \n      this.database.on('child_added', snap => {\n        prevTask.push({\n        id: snap.key,\n        taskContent: snap.val().taskContent,\n        })\n\n          this.setState({\n            tasks: prevTask\n        })\n      })\n\n      //Here i select an item to be removed, comparing the corresponding ID\n      //and using the splice to remove the task from the prevTask array. \n      this.database.on('child_removed', snap => {\n        for(var i = 0; i < prevTask.length; i++){\n          if(prevTask[i].id === snap.key){\n            prevTask.splice(i,1);\n            }\n          }\n            this.setState({\n              tasks: prevTask\n        })\n      })\n    }\n\n    addTask(task){\n      this.database.push().set({taskContent: task});   \n    }\n\n    removeTask(taskId){\n      this.database.child(taskId).remove();\n    }\n\n    //We need to use a key, special prop that we need to apply for any elements in an array. \n    //I will use map method because i wanna call each element in the tasks array in order.\n    //In task.id prop i can use to send back to firebase which element i wanna delete.\n    render() {\n      return (\n        <div className=\"taskWrapper\">\n        <div className=\"taskHeader\">\n        <div className=\"heading\">Mikaelas Todo-list with React And Firebase</div>\n        </div>\n        <div className=\"taskBody\">\n        {\n          this.state.tasks.map((task) => {\n            return(\n            <Task taskContent = {task.taskContent} \n            taskId = {task.id} \n            key = {task.id}\n            removeTask = {this.removeTask} />\n            )\n          })\n        }          \n        </div>\n          <span className=\"footer\">\n          <TaskForm addTask = {this.addTask} />\n        </span>\n        </div>\n      );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nexport default App;"],"sourceRoot":""}