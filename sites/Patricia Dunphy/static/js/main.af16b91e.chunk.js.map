{"version":3,"sources":["components/AddToList.js","components/movieSearch/movieSearchResult.js","components/movieSearch/MovieSearch.js","components/layout/Card.js","components/ListItem.js","components/List.js","results.js","components/layout/Header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["AddToList","state","title","year","onSubmit","e","preventDefault","Data","props","addToList","setState","onChange","target","name","value","this","style","display","paddingLeft","paddingRight","type","placeholder","className","Component","axios","create","baseURL","MovieSearch","apiResult","replace","movieSearchResult","get","then","res","data","results","overview","JSON","stringify","push","console","log","useStyles","makeStyles","root","maxWidth","media","height","MediaCard","classes","Card","CardActionArea","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","ListItem","getStyle","background","padding","borderBottom","textDecoration","listItem","completed","marginLeft","marginRight","markComplete","showCard","id","bind","onClick","readMore","titleStyle","delete","btnStyle","border","borderRadius","cursor","float","List","listItems","map","key","headerStyle","textAlign","linkStyle","Header","to","About","Fragment","App","filter","newId","length","put","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mVA+CeA,E,4MA5CXC,MAAQ,CACJC,MAAO,GACPC,KAAM,I,EAEVC,SAAW,SAACC,GACRA,EAAEC,iBACF,IAAMC,EAAO,CACTL,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAErB,EAAKK,MAAMC,UAAUF,EAAKL,MAAOK,EAAKJ,MACtC,EAAKO,SAAS,CAAER,MAAO,KACvB,EAAKQ,SAAS,CAAEP,KAAM,M,EAG1BQ,SAAW,SAACN,GAAD,OAAO,EAAKK,SAAL,eAAgBL,EAAEO,OAAOC,KAAMR,EAAEO,OAAOE,S,uDAGtD,OACI,0BAAMV,SAAUW,KAAKX,SAAUY,MAAO,CAACC,QAAS,OAAQC,YAAa,MAAOC,aAAc,QACtF,2BACAC,KAAK,OACLP,KAAK,QACLQ,YAAY,gBACZP,MAAOC,KAAKd,MAAMC,MAClBS,SAAUI,KAAKJ,WAEf,2BACAS,KAAK,OACLP,KAAK,OACLQ,YAAY,eACZP,MAAOC,KAAKd,MAAME,KAClBQ,SAAUI,KAAKJ,WAEf,2BACAS,KAAK,SACLN,MAAM,SACNQ,UAAU,sB,GAtCFC,a,wFCATC,MAAMC,OACjB,CACIC,QAAS,8FCeFC,EAfK,SAACnB,GACb,IAAMoB,EAAY,GACZ1B,EAAQM,EAAMN,MAAM2B,QAAQ,MAAO,KAQ7C,OAPIC,EAAkBC,IAAI7B,GACjB8B,MAAK,SAAAC,GACcA,EAAIC,KAAKC,QAAzB,IACMC,EAAWC,KAAKC,UAAUL,EAAIC,KAAKC,QAAQ,GAAGC,UACpDR,EAAUW,KAAKH,GACfI,QAAQC,IAAIb,MAGpB,8CCJFc,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OAwCGC,EApCG,SAACxC,GACjB,IAAMyC,EAAUP,IAEhB,OACE,kBAACQ,EAAA,EAAD,CAAM5B,UAAW2B,EAAQL,MACvB,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE9B,UAAW2B,EAAQH,MACnBO,MAAM,iDACNnD,MAAM,0BAER,kBAACoD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAE7ClD,EAAMN,OAGT,kBAACqD,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,KAI1D,kBAAC,EAAD,CAAaxD,MAAOM,EAAMN,WAIhC,kBAAC0D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,aAGA,kBAACE,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,YC7CKI,EAAb,kDAkBI,aAAc,IAAD,8BACT,gBAlBJC,SAAW,WAEP,MAAO,CACHC,WAAY,UACZC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAK5D,MAAM6D,SAASC,UAAY,eAAiB,OACjEC,WAAY,MACZC,YAAa,QASR,EALbC,aAAe,SAACpE,GACZmC,QAAQC,IAAI,EAAKjC,QAMjB,EAAKP,MAAM,CACPyE,UAAU,GAHL,EAlBjB,uDA2BQ3D,KAAKL,SAAS,CACVgE,UAAW3D,KAAKd,MAAMyE,aA5BlC,+BA+Bc,IAAD,SACuB3D,KAAKP,MAAM6D,SAA/BM,EADH,EACGA,GAAIzE,EADP,EACOA,MAAOC,EADd,EACcA,KACnB,OACI,yBAAKa,MAAOD,KAAKiD,YACb,2BACI,2BAAO5C,KAAK,WAAWT,SAAUI,KAAKP,MAAMiE,aAAaG,KAAK7D,KAAK4D,KAAO,GAC1E,0BAAMA,GAAG,QAAQE,QAAS,kBAAI,EAAKC,YAAY9D,MAAO+D,GAAc7E,EAApE,KAA8EC,EAA9E,KAEA,4BAAQ0E,QAAS9D,KAAKP,MAAMwE,OAAOJ,KAAK7D,KAAM4D,GAAK3D,MAASiE,GAA5D,MAIAlE,KAAKd,MAAMyE,SACX,6BACI,kBAAC,EAAD,CAAWxE,MAAOA,KAKpB,UAlDtB,GAA8BqB,aA2DxB0D,EAAW,CACbhB,WAAY,UACZN,MAAO,OACPuB,OAAQ,OACRhB,QAAS,UACTiB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGLN,EAAa,CACfK,OAAQ,WAGGrB,IChEAuB,E,uKARF,IAAD,OAEJ,OAAOvE,KAAKP,MAAM+E,UAAUC,KAAI,SAACnB,GAAD,OAChC,kBAAC,EAAD,CAAUoB,IAAKpB,EAASM,GAAIN,SAAUA,EAAUI,aAAc,EAAKjE,MAAMiE,aACzEO,OAAQ,EAAKxE,MAAMwE,gB,GANRzD,aCDJC,MAAMC,OACjB,CACIC,QAAS,6C,QCQjB,IAAMgE,EAAc,CAChBzB,WAAY,OACZN,MAAO,OACPgC,UAAW,SACXzB,QAAS,QAGP0B,EAAY,CACdjC,MAAO,OACPS,eAAgB,QAELyB,EApBf,WACI,OACI,4BAAQ7E,MAAQ0E,GACX,sDACA,kBAAC,IAAD,CAAM1E,MAAO4E,EAAWE,GAAI,KAA5B,QAFL,MAEmD,kBAAC,IAAD,CAAM9E,MAAO4E,EAAWE,GAAG,UAA3B,WCL5C,SAASC,IACpB,OACI,kBAAC,IAAMC,SAAP,KACI,qCACA,0E,WCmEGC,E,4MA9DbhG,MAAQ,CACNsF,UAAW,I,EAWbd,aAAe,SAACE,GACd,EAAKjE,SAAS,CAAC6E,UAAW,EAAKtF,MAAMsF,UAAUC,KAAI,SAAAnB,GAIjD,OAHGA,EAASM,KAAOA,IACjBN,EAASC,WAAaD,EAASC,WAE1BD,Q,EAIXW,OAAS,SAACL,GACVxC,EAAQ6C,OAAR,kBAA0BL,EAA1B,UACG3C,MAAK,SAAAC,GAAG,OAAI,EAAKvB,SAAS,CAAC6E,UAAU,YAAK,EAAKtF,MAAMsF,UAAUW,QAAO,SAAA7B,GAAQ,OAAEA,EAASM,KAAKA,Y,EAGjGlE,UAAY,SAACP,EAAOC,GAClB,IAAMgG,EAAS,EAAKlG,MAAMsF,UAAUa,OACpCjE,EAAQkE,IAAR,kBAAuBF,EAAvB,SAAqC,CACnCxB,GAAIwB,EACJjG,MAAOA,EACPC,KAAMA,EACNmE,WAAW,IAEZtC,MAAK,SAAAC,GAAG,OAAI,EAAKvB,SAAS,CAAC6E,UAAU,GAAD,mBAC/B,EAAKtF,MAAMsF,WADoB,CACTtD,EAAIC,a,kEAhCd,IAAD,OACjBC,EAAQJ,IAAI,gBACXC,MAAK,SAAAC,GACJO,QAAQC,IAAIR,EAAIC,MAChB,EAAKxB,SAAS,CAAE6E,UAAWtD,EAAIC,Y,+BA+B1B,IAAD,OACN,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOgF,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAAhG,GAAK,OACjC,kBAAC,IAAMwF,SAAP,KACE,kBAAC,EAAD,CAAWvF,UAAW,EAAKA,YAC3B,kBAAC,EAAD,CAAM8E,UAAW,EAAKtF,MAAMsF,UAAWd,aAAc,EAAKA,aAC1DO,OAAQ,EAAKA,aAMjB,kBAAC,IAAD,CAAOuB,KAAK,SAAS7C,UAAWqC,W,GAvD1BxE,aCEEkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhF,QAAQgF,MAAMA,EAAMC,c","file":"static/js/main.af16b91e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass AddToList extends Component{\n    state = {\n        title: '',\n        year: ''\n    }\n    onSubmit = (e) => {\n        e.preventDefault();\n        const Data = {\n            title: this.state.title,\n            year: this.state.year,\n        }\n        this.props.addToList(Data.title, Data.year);\n        this.setState({ title: ''});\n        this.setState({ year: ''});\n    }\n     \n    onChange = (e) => this.setState({[e.target.name]:e.target.value});\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display: 'flex', paddingLeft: '20%', paddingRight: '20%'}}>\n                <input \n                type=\"text\" \n                name=\"title\" \n                placeholder=\"Add Movie ...\"\n                value={this.state.title}\n                onChange={this.onChange}\n                />\n                <input \n                type=\"text\" \n                name=\"year\" \n                placeholder=\"Add Year ...\"\n                value={this.state.year}\n                onChange={this.onChange}\n                />\n                <input \n                type=\"submit\" \n                value=\"Submit\" \n                className=\"submitButton\" \n                />\n            </form>\n        )\n    }\n}\n\nexport default AddToList;","import axios from 'axios';\n\nexport default axios.create(\n    {\n        baseURL: 'https://api.themoviedb.org/3/search/movie?api_key=9f11cab5dffa3d6b4944a08f7a88559e&query='\n    }\n)","import React, { Component } from 'react';\nimport movieSearchResult from './movieSearchResult';\n\n\nconst MovieSearch = (props) => {\n        const apiResult = [];\n        const title = props.title.replace(/\\s/g, \"+\");\n        movieSearchResult.get(title)\n            .then(res =>{\n                const results = res.data.results\n                const overview = JSON.stringify(res.data.results[0].overview)\n                apiResult.push(overview)\n                console.log(apiResult)\n            })\n    return (\n        <span>placeholder</span>\n        // <span>{apiResult[0]}</span>\n    )\n}\nexport default MovieSearch;\n\n// class MovieSearch extends Component {\n\n//     constructor(props){\n//         super(props)\n//         this.state = {}\n\n//         this.performSearch()\n//     }\n\n    \n//     performSearch(){\n//         const title = this.props.title.replace(/\\s/g, \"+\");\n//         // console.log(\"Perform search using moviedb\")\n//         movieSearchResult.get(title)\n//             .then(res =>{\n//                 // console.log('fetched data successfully')\n//                 const results = res.data.results\n\n//                 var movieRows = []\n\n//                 // console.log(res.data.results[0].overview)\n\n//                 const overview = JSON.stringify(res.data.results[0].overview)\n//                 console.log(overview)\n//                 // res.forEach((movie)=>{\n//                 //     console.log(movie.title)\n//                 // })\n//                 // Object.entries(res).map(([key, value])=>{\n//                 //     console.log(value[1])\n//                 // })\n\n//                 // console.log(results[0])\n//                 // this.setState({ movieList : res.data.results })\n//                 // console.log(this.state.movieList)\n//                 })\n//     }\n\n//     render(){\n//         return(\n//             <span>overview</span>\n//         )\n//     }\n    \n// }\n// export default MovieSearch;\n// class MovieSearch extends Component {\n\n//         constructor(props){\n//             super(props);\n\n//             this.state = {\n//                 movieList: []\n//             }\n//         }\n//         componentDidMount(){\n//             //Replacing spaces in title (from input) with +\n//             const title = this.props.title.replace(/\\s/g, \"+\");\n        \n//             //Searching in the movie database for the title\n//             movieSearchResult.get(title)\n//             .then(res =>{\n//                 this.setState({ movieList : res.data.results })\n//                 console.log(this.state.movieList)\n//                 })\n//         }        \n//         render(){\n            \n//         return (\n//             <span>hej man</span>\n\n//       );\n// }\n// }\n// export default MovieSearch;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport MovieSearch from '../movieSearch/MovieSearch';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst MediaCard = (props) => {\n  const classes = useStyles();\n    \n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {/* Lizard */}\n            {props.title}\n            \n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {/* Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n            across all continents except Antarctica */}\n            {/* <MovieSearch title={props.title}/> */}\n            <MovieSearch title={props.title}/>\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Read More\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Close\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\nexport default MediaCard;","import React, { Component } from 'react';\nimport MediaCard from './layout/Card';\nimport MovieSearch from './movieSearch/MovieSearch';\n\nexport class ListItem extends Component {\n    getStyle = () => {\n        //If list item is complete it'll be line-through, else it won't (none)\n        return {\n            background: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.listItem.completed ? 'line-through' : 'none',\n            marginLeft: '20%',\n            marginRight: '20%'\n        }\n    }\n\n    markComplete = (e) => {\n        console.log(this.props)\n    }\n\n    //State for readMore function\n    constructor(){\n        super()\n        this.state={\n            showCard: false\n        }\n    }\n\n    //Function to toggle read more section\n    readMore(){\n        this.setState({\n            showCard: !this.state.showCard\n        })\n    }\n    render() {\n        const { id, title, year } = this.props.listItem;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{''}\n                    <span id=\"title\" onClick={()=>this.readMore()} style={titleStyle}>{ title } ({year})</span>\n                    \n                    <button onClick={this.props.delete.bind(this, id)} style = {btnStyle}>x</button>\n                </p>\n                {   \n                    //If showCard is true this div will be returned, \n                    this.state.showCard?\n                    <div>\n                        <MediaCard title={title}/>\n                    {/* skicka med movie i card-komponenten move={title, year} */}\n                    </div>\n                    \n                    //otherwise null will be returned\n                    : null\n                }\n                \n            </div>\n            \n        )\n    }\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius: '50%',\n    cursor: 'pointer',\n    float: 'right'\n}\n\nconst titleStyle = {\n    cursor: 'pointer',\n}\n\nexport default ListItem;\n","import React, { Component } from 'react';\nimport ListItem from './ListItem';\n\nclass List extends Component {\n\n    render(){\n        //mapping through each todo\n        return this.props.listItems.map((listItem) => (\n        <ListItem key={listItem.id} listItem={listItem} markComplete={this.props.markComplete}\n        delete={this.props.delete}/>\n        ));\n    }\n}\nexport default List;","import axios from 'axios';\n\nexport default axios.create(\n    {\n        baseURL: 'https://movies-rec-9e769.firebaseio.com/'\n    }\n)","import React from 'react'\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style ={headerStyle}>\n             <h1>Movies to / watch / ed</h1>\n             <Link style={linkStyle} to =\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\nexport default Header;\n","import React from 'react'\n\nexport default function About() {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the Movies to/watch/ed app v1.0.0.</p>\n        </React.Fragment>\n    )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport AddToList from './components/AddToList';\nimport List from './components/List';\nimport results from './results';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport MovieSearch from './components/movieSearch/MovieSearch';\n\nclass App extends Component {\n  state = {\n    listItems: [ ]\n  }\n  componentDidMount(){\n    results.get('/movies.json')\n    .then(res =>{\n      console.log(res.data)\n      this.setState({ listItems: res.data})\n    })\n  }\n\n  //Complete item\n  markComplete = (id) => {\n    this.setState({listItems: this.state.listItems.map(listItem=>{\n      if(listItem.id === id){\n        listItem.completed = !listItem.completed\n      }\n      return listItem;\n    })});\n  }\n  //Delete item\n  delete = (id) =>{\n  results.delete(`/movies/${id}.json`)\n    .then(res => this.setState({listItems: [...this.state.listItems.filter(listItem=>listItem.id!==id)]}));\n}\n\n  addToList = (title, year) => {\n    const newId = (this.state.listItems.length);\n    results.put(`/movies/${newId}.json`, {\n      id: newId,\n      title: title,\n      year: year,\n      completed: false  \n    })\n    .then(res => this.setState({listItems: \n      [...this.state.listItems, res.data]}));\n   \n  }\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddToList addToList={this.addToList}/>\n                <List listItems={this.state.listItems} markComplete={this.markComplete}\n                delete={this.delete}/>\n\n                {/* <MovieSearch title=\"Avengers\"/> */}\n\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />          \n          </div>\n        </div>\n      </Router>\n    );\n  }   \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}