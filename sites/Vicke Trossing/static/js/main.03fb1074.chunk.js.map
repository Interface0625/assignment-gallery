{"version":3,"sources":["Components/ListItem/ListItems.js","Quotes/PostQuotes.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","PostQuotes","Quotes","postQuotes","index","quotes","React","Component","library","add","faTrash","App","state","notes","currentItem","handleInput","bind","addItem","fetch","then","response","json","data","setState","this","Date","now","note","preventDefault","newItem","filteredItems","filter","console","log","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03fb1074.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction ListItems(props){\n    const items = props.items;\n    const listItems = items.map(item =>\n   {\n       return <div className=\"list\" key={item.key}>\n     <p>\n            <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{props.setUpdate(e.target.value,item.key)}}/>\n        <span>\n            <FontAwesomeIcon className=\"faicons\" onClick={ () => {props.deleteItem(item.key)}} icon=\"trash\" />\n        </span>\n     </p>\n     \n    </div>})\n    return(\n        <div>{listItems}</div>\n    )\n}\nexport default ListItems;","import React, {Component} from 'react';\nimport Quotes from './quotes.json'\n\n\nclass PostQuotes extends React.Component{\n\n    render(){ \n        return(\n            <div>\n                {Quotes.map((postQuotes, index)=>{\n                    return <h2>{postQuotes.quotes}</h2>\n                })}\n            </div>\n        )\n      }\n    }   \n    \n    export default PostQuotes;\n","import React from 'react';\nimport './App.css';\nimport ListItems from './Components/ListItem/ListItems';\n//import AddItem from './Components/AddItem/AddItem'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport PostQuotes from './Quotes/PostQuotes'\n\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      notes: [],\n      items:[],\n      currentItem:{\n        text:\"\",\n        key:\"\"\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n\n  componentDidMount() {\n    fetch('./quotes')\n      .then(response => response.json())\n      .then(data => this.setState({ data }));\n  }\n\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value, \n        key: Date.now()\n      }\n    })\n  }\n\n  addItem(note){\n\n    note.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const items=[...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem :{\n          text:\"\",\n          key:\"\"\n        } \n      })\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems= this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      \n      items: filteredItems\n    })\n\n  }\n\n  setUpdate(text, key){\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key===key){\n        console.log(\"Cyka Blyat\");\n        item.text=text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <div className=\"App-header\" id=\"top\">\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n              <input type=\"text\" placeholder=\"Enter TODO\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n              <button type=\"submit\">Add</button>\n          </form>\n          <p>{this.state.items.text}</p>\n        </div>\n\n        <div className=\"App-body\" id=\"below\">\n          <header>\n            <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n          </header>\n       </div>\n\n      <div className=\"Quotes\">\n        <h2>Quote of the day:</h2>\n        <PostQuotes/>\n      </div>\n\n     </div>\n    );\n  }\n}   \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}