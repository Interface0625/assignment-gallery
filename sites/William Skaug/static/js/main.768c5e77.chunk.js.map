{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAceA,EAZD,WACZ,OACE,yBAAKC,UAAU,SACb,4CACA,6CACA,oF,2CCSNC,gBAVqB,CACjBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKX,IAAMC,EAAiBR,YACjBS,EAAmBT,cACnBU,EAAYV,YAAmBW,WAAWC,gBCkBjCC,EA/BI,SAACC,GAAS,MAEOC,mBAAS,GAFhB,mBAElBC,EAFkB,KAERC,EAFQ,OAGCF,mBAAS,MAHV,mBAGlBG,EAHkB,KAGXC,EAHW,OAIHJ,mBAAS,MAJN,mBAIlBK,EAJkB,KAIbC,EAJa,KA6BzB,OAtBAC,qBAAU,WAIN,IAAMC,EAAaf,EAAegB,IAAIV,EAAKW,MACrCC,EAAgBjB,EAAiBkB,WAAW,UAElDJ,EAAWK,IAAId,GAAMe,GAAG,iBAAiB,SAACC,GACtC,IAAIC,EAAcD,EAAKE,iBAAmBF,EAAKG,WAAc,IAC7DhB,EAAYc,MACb,SAACG,GACAf,EAASe,KAJb,sBAKG,8BAAAC,EAAA,sEACmBZ,EAAWa,iBAD9B,OACOhB,EADP,OAEOiB,EAAY3B,IAClBgB,EAAcY,IAAI,CAAClB,MAAKiB,cACxBhB,EAAOD,GAJR,8CASH,CAACN,IACE,CAAEE,WAAUI,MAAKF,U,OCRbqB,EAvBK,SAAC,GAAqB,IAApBzB,EAAmB,EAAnBA,KAAM0B,EAAa,EAAbA,QAAa,EAKb3B,EAAWC,GAA5BM,EAL8B,EAK9BA,IAAKJ,EALyB,EAKzBA,SAUZ,OAPAM,qBAAU,WAEFF,GACAoB,EAAQ,QAEb,CAACpB,EAAKoB,IAIL,kBAAC,IAAOC,IAAR,CAAY1C,UAAU,eAClB2C,QAAS,CAACC,MAAO,GACjBC,QAAS,CAACD,MAAO3B,EAAW,QCwBzB6B,EA7CI,WAAO,IAAD,EACG9B,mBAAS,MADZ,mBACdD,EADc,KACR0B,EADQ,OAEKzB,mBAAS,MAFd,mBAEdG,EAFc,KAEPC,EAFO,KAIf2B,EAAQ,CAAC,YAAa,cAmB5B,OACI,8BACI,+BAEI,2BAAOC,KAAK,OAAOC,SApBT,SAACC,GACnB,IAAIC,EAAWD,EAAEE,OAAOC,MAAM,GAK1BF,GAAYJ,EAAMO,SAASH,EAASH,OAEpCP,EAAQU,GACR/B,EAAS,MAETqB,EAAQ,MACRrB,EAAS,iDASL,oCAKJ,yBAAKpB,UAAU,UACVmB,GAAS,yBAAKnB,UAAU,SAASmB,GACjCJ,GAAQ,6BAAMA,EAAKW,MAKnBX,GAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAM0B,QAASA,O,OCnB5Cc,EArBM,SAAC3B,GAAgB,IAAD,EACTZ,mBAAS,IADA,mBAC1BwC,EAD0B,KACpBC,EADoB,KAmBjC,OAfAlC,qBAAU,WACN,IAAMmC,EAAQhD,EAAiBkB,WAAWA,GACzC+B,QAAQ,YAAa,QACrBC,YAAW,SAAC7B,GAIT,IAAI8B,EAAY,GAChB9B,EAAK+B,SAAQ,SAAAC,GACTF,EAAUG,KAAV,2BAAmBD,EAAIE,QAAvB,IAA+BC,GAAIH,EAAIG,SAE3CT,EAAQI,MAEZ,OAAO,kBAAMH,OACd,CAAC9B,IACG,CAAC4B,SCWGW,EA7BG,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAETZ,EAAQD,EAAa,UAArBC,KAIP,OAHAa,QAAQC,IAAId,GAIR,yBAAKxD,UAAU,YACVwD,GAAQA,EAAKe,KAAI,SAAAR,GAAG,OAEjB,kBAAC,IAAOrB,IAAR,CAAY1C,UAAU,WAAWwE,IAAKT,EAAIG,GACtCO,QAAM,EACNC,WAAY,CAACC,QAAS,GAGtBC,QAAS,kBAAMR,EAAeL,EAAI1C,OAIlC,kBAAC,IAAOwD,IAAR,CAAYC,IAAKf,EAAI1C,IAAK0D,IAAI,eAC1BpC,QAAS,CAACgC,QAAS,GACnB9B,QAAS,CAAC8B,QAAS,GACnBK,WAAY,CAAEC,MAAO,WCI9BC,EAxBD,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaf,EAAoB,EAApBA,eAUzB,OAEI,kBAAC,IAAO1B,IAAR,CAAY1C,UAAU,WAAW4E,QATjB,SAAC1B,GAEdA,EAAEE,OAAOgC,UAAUC,SAAS,aAC3BjB,EAAe,OAOfzB,QAAS,CAACgC,QAAS,GACnB9B,QAAS,CAAC8B,QAAS,IAFvB,IAKI,kBAAC,IAAOE,IAAR,CAAYC,IAAKK,EAAaJ,IAAI,eAC9BpC,QAAS,CAAC2C,EAAG,UACbzC,QAAS,CAACyC,EAAG,OCCdC,MApBf,WAAe,MAGyBvE,mBAAS,MAHlC,mBAGNmE,EAHM,KAGOf,EAHP,KAMb,OACE,yBAAKpE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWoE,eAAgBA,IAI1Be,GAAgB,kBAAC,EAAD,CAAOA,YAAaA,EACrCf,eAAgBA,MChBtBoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.768c5e77.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>DumpsterGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Press the plus-button below to upload a new picture</p>\n    </div>\n    //<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    //<p>Press the plus-button below to upload a new picture</p>\n    //<p>Dump your stupid pics of your boring vacation onto here and make sure to get as many likes as you can to gain some temporary self esteem</p>\n  )\n}\nexport default Title;","//importing firebase from the installed package\nimport * as firebase from 'firebase/app'; \nimport 'firebase/storage'; //storage to store images. Firebase storage SDK\nimport 'firebase/firestore'; //firestore = database. Firestore SDK\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBhyefyOjKcYNJ5mAYE7o86SqLm2GAt3gw\",\n    authDomain: \"skaug-dummygram.firebaseapp.com\",\n    databaseURL: \"https://skaug-dummygram.firebaseio.com\",\n    projectId: \"skaug-dummygram\",\n    storageBucket: \"skaug-dummygram.appspot.com\",\n    messagingSenderId: \"881674446238\",\n    appId: \"1:881674446238:web:4064e87fffd174274c228f\"\n};\n\nfirebase.initializeApp(firebaseConfig); // Initialize Firebase\n\nconst projectStorage = firebase.storage(); //Initialize firebase storage service\nconst projectFirestore = firebase.firestore(); //Initialize firebase firestore service\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp; //Firebase server timestamp\n\nexport {projectStorage, projectFirestore, timestamp};","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\n//Hooks (in react) is a way to create a small chunk of reusable code, and those hooks can be used in whatever components need them. \n\n//This hook will be responsible for handling file uploads and return some useful values about an upload, \n//such as upload progress, any errors, and the image url after it's uploaded\nconst useStorage = (file) => {\n    //Three pieces of state that are set inside the upload progress further down.\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    //The function inside \"useEffect\" will run every time the dependency changes.\n    useEffect(() => {\n        //Inside this function is where all the logic to upload the file is going to go.\n\n        // references\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFirestore.collection('images');\n\n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100; //formula for percentage, which will be the percentage of an upload.\n            setProgress(percentage); //set progress to be the percentage.\n        }, (err) => {\n            setError(err); //set error if there is one.\n        }, async() => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            collectionRef.add({url, createdAt});\n            setUrl(url); //set url after the image has uploaded.\n            //Once an upload is complete we have the url, \n            //and a new document is created inside the images collection to match the uploaded image,\n            //and the url and the time of creation of that image is stored.\n        })\n    },  [file]); //the dependency inside the array = file.\n    return { progress, url, error }\n}\nexport default useStorage;","import React, {useEffect} from 'react';\nimport useStorage from '../hooks/useStorage';\nimport {motion} from 'framer-motion';\n\n//Destructuring the props passed into the progress bar.\nconst ProgressBar = ({file, setFile}) => {\n\n    //This hook is going to fire everything inside \"useEffect\", \n    //which will take the file, create a reference and try to upload that file.\n    //At that moment we get values back for progress, and when that is done the url as well.\n    const {url, progress} = useStorage(file);\n    //console.log(progress, url);\n    \n    useEffect(() => {\n        //File is set back to null if url has a valid value (not null/undefined).\n        if (url) {\n            setFile(null);\n        }\n    }, [url, setFile])//dependencies\n\n    return (\n        //This motion div makes a smooth animation of the progress bar.\n        <motion.div className=\"progress-bar\"\n            initial={{width: 0}}\n            animate={{width: progress + '%'}}\n        ></motion.div>\n    )\n}\nexport default ProgressBar;","import React, {useState} from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n    const [file, setFile] = useState(null); //Storing a file in a local piece of state with useState hook.\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpeg']; //An array of allowed image types.\n\n    //I guess you can call this some sort of event handling.\n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n        //console.log('changed');\n        //console.log(selected);\n\n        //Checks if there is a file selected, and if it's a valid file. else an error message will show.\n        if (selected && types.includes(selected.type)) { \n            \n            setFile(selected);\n            setError('');//This resets the error message basically (makes the error message go away).\n        } else {\n            setFile(null);\n            setError('Please select an image file (png or jpeg)');\n        }\n    }\n    \n    return (\n        <form>\n            <label>\n                {/*some JSX stuff below.*/}\n                <input type=\"file\" onChange={changeHandler} /> \n                <span>+</span>\n            </label>\n\n            {/*This outputs either an error or an image depending on what is selected etc.*/}\n            {/*NOTE! The right side of the \"&&\" is only output if the left side is true.*/}\n            <div className=\"output\">\n                {error && <div className=\"error\">{error}</div>}\n                {file && <div>{file.name}</div>}\n\n                {/*This outputs when a file is selected. \n                   \"file={file}\" is a prop that is equal to the file.\n                   \"setFile={setFile}\" sets the file back null once progress is complete, and the progress bar doesn't show again.*/}\n                {file && <ProgressBar file={file} setFile={setFile} />}\n            </div>\n        </form>\n    )\n}\nexport default UploadForm;","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([]);\n\n    //All of the database communication is inside this useEffect hook basically.\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n        .orderBy('createdAt', 'desc') //Ordering the documents by creation in descending order.\n        .onSnapshot((snap) => { //Everytime a new image is added to the database, this snapshot will basically notify.\n            \n            //This listener setup retrieves the documents once initially, \n            //and everytime a new document is added to so the documents are always in sync with what's in the database.\n            let documents = []; //Each document stored in this array is going to have both properties from the data and the id associated with it.\n            snap.forEach(doc => { //Basically cycling through all documents\n                documents.push({...doc.data(), id: doc.id});\n            });\n            setDocs(documents);\n        });\n        return () => unsub(); //This cleanup function invokes the unsub method, which \"unsubscribes\" from the collection when it's no longer used.\n    }, [collection])\n    return {docs};\n}\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport {motion} from 'framer-motion';\n\nconst ImageGrid = ({setSelectedImg}) => {\n    //Retrieves the data from the images collection in the database.\n    const {docs} = useFirestore('images'); \n    console.log(docs);\n\n    //Basically shows the images.\n    return (\n        <div className=\"img-grid\">\n            {docs && docs.map(doc => (\n                //This div is output for each individual image.\n                <motion.div className=\"img-wrap\" key={doc.id}\n                    layout //Basically makes a smooth repositioning of all the images whenever a new image is uploaded.\n                    whileHover={{opacity: 1}} //Changes the opacity slightly when you hover over an image.\n                    \n                    //When an image is clicked, the value of \"selectedImg\" updates with the url of the image (doc.url).\n                    onClick={() => setSelectedImg(doc.url)}\n                    >\n\n                    {/*Basically makes the images wait for a second before they animate onto the page.*/}\n                    <motion.img src={doc.url} alt=\"uploaded pic\" \n                        initial={{opacity: 0}}\n                        animate={{opacity: 1}}\n                        transition={{ delay: 1}}\n                    />\n                </motion.div>\n            ))}\n        </div>\n    )\n}\nexport default ImageGrid;","import React from 'react';\nimport {motion} from 'framer-motion';\n\n//This component enables so that you can open and show a full sized image when you click on a small one.\n\n//selectedImg = a destructured prop.\nconst Modal = ({selectedImg, setSelectedImg}) => {\n\n    //This function, along with the onClick event, enables so that you can close the modal when you click on the backdrop.\n    const handleClick = (e) => {\n        //The if statement makes sure that if you click on the enlarged image, the modal doesn't close down, only if you click on the backdrop.\n        if(e.target.classList.contains('backdrop')){\n            setSelectedImg(null);\n        }\n    }\n\n    return (\n        //This motion div makes a smooth opacity animation when you click on an image\n        <motion.div className=\"backdrop\" onClick={handleClick} //backdrop = the grey \"background\" that surrounds the image.\n            initial={{opacity: 0}}\n            animate={{opacity: 1}}\n\n        > {/*This motion image makes the image \"fall\" from the top to the center of the page.*/}\n            <motion.img src={selectedImg} alt=\"enlarged pic\" \n                initial={{y: \"-100vh\"}} //vh = view height\n                animate={{y: 0}}\n            />\n        </motion.div>\n    )\n}\nexport default Modal;","import React, { useState } from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  //\"useState=(null)\" because when you first load the page you have not yet selected an image.\n  //When an image is selected by clicking on it it has a value, and then it shows.\n  const [selectedImg, setSelectedImg] = useState(null); \n  //\"selectedImg\" is updated inside the ImageGrid when you click on an image.\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n\n      {/*Checks for selected image, and renders only when the left side of \"&&\" is true.*/}\n      {/*When an image is clicked, the selectedImg is updated and the enlarged imaged shows.*/}\n      {selectedImg &&( <Modal selectedImg={selectedImg} \n      setSelectedImg={setSelectedImg} /> )} \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}